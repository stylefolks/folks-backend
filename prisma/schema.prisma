generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Folks MVP Prisma Schema (기본 기능 + 확장 고려)

enum UserRole {
  USER
  INFLUENCER
  BRAND
  MASTER
}

enum UserStatus {
  ACTIVE
  BANNED
  DELETED
  INACTIVE
}

enum CrewMemberRole {
  OWNER
  MANAGER
  MEMBER
}

enum CrewStatus {
  ACTIVE
  HIDDEN
  BANNED
}

enum PostType {
  TALK
  COLUMN
  CREW
}

enum PostVisibility {
  PUBLIC
  CREW_ONLY
  FOLLOWER_ONLY
  REPORTED
}

enum SponsorshipType {
  MONTHLY
  ONETIME
}

enum AdCampaignStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CrewTabType {
  OVERVIEW
  POSTS
  NOTICE
  EVENT
  TOPIC
}

enum ReportTargetType {
  POST
  COMMENT
  USER
}

enum ReportStatus {
  PENDING
  REVIEWED
  ACTIONED
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  OTHER
}

model User {
  id              String          @id @default(uuid())
  username        String
  email           String          @unique
  passwordHash    String
  avatarUrl       String?
  bio             String?
  role            UserRole
  status          UserStatus      @default(ACTIVE)
  followers       Follow[]        @relation("Following")
  following       Follow[]        @relation("Follower")
  posts           Post[] // 작성한 게시글
  crewMemberships CrewMember[] // 속한 크루 멤버십
  sponsorships    Sponsorship[]   @relation("UserSponsorships")
  adCampaigns     AdCampaign[]    @relation("UserAdCampaigns")
  reactions       PostReaction[]
  viewLogs        PostViewLog[]
  imageAssets     ImageAsset[]
  notifications   Notification[]
  reports         ContentReport[] @relation("ReportedByUser")
  ownedCrews      Crew[]          @relation("CrewOwner") // ★ 추가: 본인이 owner인 크루들
  draftPosts      DraftPost[] // ★ 추가: 임시저장글
  comments        Comment[] // ★ 추가: 댓글
  receivedReports ContentReport[] @relation("ReportTargetUser") // ★ 추가: 자기 자신이 타겟이 된 리포트(아래 설명)
  createdAt       DateTime        @default(now())
}

model Follow {
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Crew {
  id            String          @id @default(uuid())
  name          String
  description   String?
  avatarUrl     String?
  owner         User            @relation("CrewOwner", fields: [ownerId], references: [id]) // ★ relation 명시
  ownerId       String
  members       CrewMember[]
  posts         Post[]
  status        CrewStatus      @default(ACTIVE)
  sponsorships  Sponsorship[]
  adCampaigns   AdCampaign[]
  crewTabs      CrewTab[]
  events        Event[]
  externalLinks Json?
  slug          String?         @unique
  createdAt     DateTime        @default(now())
}

model CrewMember {
  user     User           @relation(fields: [userId], references: [id])
  userId   String
  crew     Crew           @relation(fields: [crewId], references: [id])
  crewId   String
  role     CrewMemberRole
  joinedAt DateTime       @default(now())

  @@id([crewId, userId])
}

model Post {
  id          String          @id @default(uuid())
  author      User            @relation(fields: [authorId], references: [id])
  authorId    String
  crew        Crew?           @relation(fields: [crewId], references: [id])
  crewId      String?
  type        PostType
  visibility  PostVisibility  @default(PUBLIC)
  title       String
  content     Json
  isDraft     Boolean         @default(false)
  publishedAt DateTime?
  slug        String?         @unique
  createdAt   DateTime        @default(now())
  tags        PostTag[]
  reactions   PostReaction[]
  viewLogs    PostViewLog[]
  comments    Comment[]
  isFlagged   Boolean         @default(false)
  reports     ContentReport[] @relation("ReportTargetPost") // ★ 추가: 이 글이 타겟이 된 리포트
  imageAssets ImageAsset[] // ★ 추가: 이 글의 첨부 이미지들
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([postId, tagId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  postTags  PostTag[]
}

model DraftPost {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  title        String
  content      Json
  lastEditedAt DateTime @default(now())
}

model Comment {
  id              String          @id @default(uuid())
  post            Post            @relation(fields: [postId], references: [id])
  postId          String
  author          User            @relation(fields: [authorId], references: [id])
  authorId        String
  parentCommentId String?
  content         String
  isEdited        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  reports         ContentReport[] @relation("ReportTargetComment") // ★ 추가: 이 댓글이 타겟이 된 리포트
}

model Notification {
  id          String   @id @default(uuid())
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String
  type        String
  sourceId    String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model NotificationTemplate {
  id        String   @id @default(uuid())
  code      String   @unique
  message   String
  createdAt DateTime @default(now())
}

model ImageAsset {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Sponsorship {
  id        String          @id @default(uuid())
  sponsor   User            @relation("UserSponsorships", fields: [sponsorId], references: [id])
  sponsorId String
  crew      Crew            @relation(fields: [crewId], references: [id])
  crewId    String
  amount    Int
  type      SponsorshipType
  startedAt DateTime
  endedAt   DateTime?
}

model AdCampaign {
  id        String   @id @default(uuid())
  brand     User     @relation("UserAdCampaigns", fields: [brandId], references: [id])
  brandId   String
  crew      Crew     @relation(fields: [crewId], references: [id])
  crewId    String
  content   String
  bannerUrl String
  budget    Int
  startsAt  DateTime
  endsAt    DateTime
  status    AdCampaignStatus @default(PENDING)
}

model PostReaction {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  createdAt DateTime @default(now())
}

model PostViewLog {
  id       String   @id @default(uuid())
  post     Post     @relation(fields: [postId], references: [id])
  postId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  viewedAt DateTime @default(now())
}

model Event {
  id        String   @id @default(uuid())
  crew      Crew     @relation(fields: [crewId], references: [id])
  crewId    String
  title     String
  date      DateTime
  location  String?
  link      String?
  createdAt DateTime @default(now())
}

model CrewTab {
  id        String      @id @default(uuid())
  crew      Crew        @relation(fields: [crewId], references: [id])
  crewId    String
  title     String
  type      CrewTabType
  order     Int
  hashtag   String?
  topic     Topic?      @relation(fields: [topicId], references: [id])
  topicId   String?
  isVisible Boolean     @default(true)
  createdAt DateTime    @default(now())
}

model Topic {
  id        String      @id @default(uuid())
  hashtag   String      @unique
  crewTabs  CrewTab[]
  createdAt DateTime    @default(now())
}

model ContentReport {
  id         String           @id @default(uuid())
  reporter   User             @relation("ReportedByUser", fields: [reporterId], references: [id])
  reporterId String
  // 어떤 타입이 타겟인지에 따라 relation 분기 (유연성을 위해 relation을 모두 nullable로 두기)
  post       Post?            @relation("ReportTargetPost", fields: [postId], references: [id])
  postId     String?
  comment    Comment?         @relation("ReportTargetComment", fields: [commentId], references: [id])
  commentId  String?
  user       User?            @relation("ReportTargetUser", fields: [userId], references: [id])
  userId     String?
  targetType ReportTargetType
  targetId   String
  reason     ReportReason
  status     ReportStatus     @default(PENDING)
  createdAt  DateTime         @default(now())

  @@unique([targetId, reporterId])
}
